#!/usr/bin/env ruby
# Suggested execution is mixing find / xargs with the parallel (P) parameters:
# find test/fixture/ -type f | xargs -P 5  -n 10 ./bin/czindexer
# will fire 5 czindexer each with 10 files to process...
require 'code_zauker/cli'
require 'redis/connection/hiredis'
require 'redis'
require 'optparse'
options={}
optparse= OptionParser.new do  |opts|
  opts.banner="Usage: czindexer [options] [file1] [file2]..."
  options[:verbose] = false
  options[:redis_host]="127.0.0.1"
  options[:redis_port]=6379
  options[:redis_password]=nil


  opts.on( '-v', '--verbose', 'Output more information' ) do
    options[:verbose] = true
  end 

  options[:reindex]=false
  opts.on( '-f', '--force-reindex', 'Force Reindex (default:false)') do
    options[:reindex]=true
  end

  opts.on('-h','--redis-server pass@SERVER:port', String,
          'Specify the alternate redis server to use')do |server|
    myoptions=CodeZauker::CliUtil.new().parse_host_options(server)
    options[:redis_host]=myoptions[:redis_host]
    options[:redis_port]=myoptions[:redis_port]
    options[:redis_password]=myoptions[:redis_password]
    
    if options[:redis_password]
      puts "Server: #{options[:redis_host]} Port:#{options[:redis_port]} WithPassword"
    else
      puts "Server: #{options[:redis_host]} Port:#{options[:redis_port]}"
    end
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end

  options[:check_index]=false
  opts.on( '-c', '--check-index', 'Do a sanity check of the index before starting') do
    options[:check_index]=true
  end

end


optparse.parse!
require 'code_zauker'


def processElement(l,fs,options)  
  #Remove trailing / from l before proceeding
  if l[-1]=="/"
    l=l.chop
  end
  if Dir.exists?(l)     
    #puts "Processing Dir #{l}" if options[:verbose]
    Dir["#{l}/*"].each do |elem|      
      processElement(elem,fs,options)      
    end
    # puts "Processing via find+xargs" if options[:verbose]
    # if options[:reindex]==false
    #   system("find #{l}  -type f -print0 | xargs -0 -P 7  -n 5 #{$0}")
    # else
    #   system("find #{l}  -type f -print0 | xargs -0 -P 7  -n 5 #{$0} -f ")
    # end
  else
    # avoid processing bad guys...
    toExclude=false
    CodeZauker::DEFAULT_EXCLUDED_EXTENSION.each do | ext |
      if l.downcase().end_with?(ext)
        toExclude=true
        break
      end
    end
    if !toExclude && !l.include?("/.hg/") && !l.include?("/CVS/") && !l.include?("/.svn/") && !l.include?("/.git/")
      #puts "Processing File #{l}" if options[:verbose]
      startTime=Time.now
      if   options[:reindex] == true          
        fs.reindex([l])
      else
        fs.load(l,noReload=true)
      end
      timeTaken=Time.now-startTime
      $PROCESSED_FILES+=1
      $CUMULATED_TIME +=timeTaken
      $FILES_PER_SEC= $PROCESSED_FILES/$CUMULATED_TIME
      if options[:verbose] and (( $PROCESSED_FILES % 75 ) == 0 )
        puts "#{$PROCESSED_FILES} files processed so far... Files per sec:#{$FILES_PER_SEC} Last:#{timeTaken}"
      end
    else
      #puts "SKIPPED binary file: #{l}"   if options[:verbose]     
    end

  end  
end

################# MAIN STARTS HERE

if options[:check_index]
    fixConn=Redis.new(:host => options[:redis_host], :port => options[:redis_port], :password=> options[:redis_password])
    im=CodeZauker::IndexManager.new(fixConn)
    im.check_repair()   
    exit
end 

begin  
  $CUMULATED_TIME=0
  # Allocated here to recycle connection
  redisConnection=Redis.new(:host => options[:redis_host], :port => options[:redis_port], :password=> options[:redis_password])
  fs=CodeZauker::FileScanner.new(redisConnection)
  $PROCESSED_FILES=0
  puts "Code Zauker v#{CodeZauker::VERSION}" if  options[:verbose]
  puts "Reindexing..." if options[:verbose]==true and options[:reindex]==true
  ARGV.each do | l |
    processElement(l,fs,options)
  end
ensure
  fs.disconnect
  puts "End:#{$PROCESSED_FILES} files Files per sec:#{$FILES_PER_SEC}"
end
